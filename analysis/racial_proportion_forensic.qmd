---
title: "Predict racial proportions for the forensic database"
author: "Junhui He"
format: html
editor: visual
---

```{r}
library(ggplot2)
library(grid)
library(gridExtra)
logit <- function(y) {
  return(log(y/(1-y)))
}

ilogit <- function(x) {
  return(exp(x)/(1+exp(x)))
}
```

## Read data

```{r}
data_path = '/Users/hjh/University of Michigan Dropbox/Junhui He/PODF/data'
response_data_path = file.path(data_path, 'CODIS_regression_data.csv')
predictor_data_path = file.path(data_path, 'CODIS_regression_predict_data.csv')

response_data = read.csv(response_data_path)
predictor_data = read.csv(predictor_data_path)
predictor_data[is.na(predictor_data)] = 0
```

## Preprocess data

```{r}
# obtain the index of training states
idx = c(5, 9, 14, 19, 28, 41, 43)

# calculate the response values
y = array(dim = c(7, 3))
colnames(y) = c('mt.black', 'mt.white', 'mt.total')
rownames(y) = response_data[,2]
y[,3] = response_data[,12]
y[,1] = round(y[,3] * response_data[,3])
y[,2] = round(y[,3] * response_data[,6])

# calculate the predictor values
x = matrix(nrow = 50, ncol = 4)
rownames(x) = predictor_data[,2]
colnames(x) = c('census.percent.black', 'census.percent.white', 'incarc.percent.black', 'incarc.percent.white')
x[,c(1,2)] = as.matrix(predictor_data[,c(12,13)])
x[,3] = predictor_data[,5]/(predictor_data[,3]-predictor_data[,10])
x[,4] = predictor_data[,4]/(predictor_data[,3]-predictor_data[,10])

# create training data and test data
train_data = as.data.frame(x[idx,])
test_data = as.data.frame(x[-idx,])
```

## Binomial regression model

### Fit the binomial regression for black people

```{r}
# fit the binomial regression
binomial_regression_black = glm(formula = cbind(y[,1], y[,3]-y[,1])~census.percent.black+census.percent.white+incarc.percent.black+incarc.percent.white, family = binomial, data = train_data)
summary(binomial_regression_black)
```

```{r}
predict(binomial_regression_black, test_data, type = 'response')
```

```{r}
# likelihood ratio test
anova(binomial_regression_black)
```

```{r}
# goodness of fit
sum(residuals(binomial_regression_black, type = 'pearson')^2)
```

```{r}
# confidence interval
confint(binomial_regression_black)
```

```{r}
# confidence intervals of probabilities
result_black = predict(binomial_regression_black, as.data.frame(x), se.fit = TRUE)
alpha = 0.05
z_hat_black = cbind(result_black$fit, result_black$fit-qnorm(1-alpha/2)*result_black$se.fit, result_black$fit+qnorm(1-alpha/2)*result_black$se.fit)
y_hat_black = ilogit(z_hat_black)
rownames(y_hat_black) = rownames(x)
colnames(y_hat_black) = c('probability', 'lcl', 'ucl')
pi_hat_black = y_hat_black
```

```{r}
# probabilities
probs_black = pnorm(logit(predictor_data[,12]), mean = result_black$fit, sd = result_black$se.fit, lower.tail = FALSE)
# p value
p_values_black = 1 - probs_black
```

### Fit the binomial regression for white people

```{r}
# fit the binomial regression
binomial_regression_white = glm(formula = cbind(y[,2], y[,3]-y[,1]-y[,2])~census.percent.black+census.percent.white+incarc.percent.black+incarc.percent.white, family = binomial, data = train_data)
summary(binomial_regression_white)
```

```{r}
predict(binomial_regression_white, test_data, type = 'response')
```

```{r}
# likelihood ratio test
anova(binomial_regression_white, test = 'LRT')
```

```{r}
# goodness of fit
sum(residuals(binomial_regression_white, type = 'pearson')^2)
```

```{r}
# confidence interval
confint(binomial_regression_white)
```

```{r}
# confidence intervals of probabilities
result_black = predict(binomial_regression_black, as.data.frame(x), se.fit = TRUE)
alpha = 0.05
z_hat_black = cbind(result_black$fit, result_black$fit+qnorm(1-alpha/4)*result_black$se.fit, result_black$fit-qnorm(1-alpha/4)*result_black$se.fit)
p_hat_black = ilogit(z_hat_black)
```

```{r}
# confidence intervals of probabilities
result_white = predict(binomial_regression_white, as.data.frame(x), se.fit = TRUE)
alpha = 0.05
z_hat_white = cbind(result_white$fit, result_white$fit-qnorm(1-alpha/4)*result_white$se.fit, result_white$fit+qnorm(1-alpha/4)*result_white$se.fit)
p_hat_white = ilogit(z_hat_white)
# Bonferroni method
pi_hat_white = (1-p_hat_black)*p_hat_white
rownames(pi_hat_white) = rownames(x)
colnames(pi_hat_white) = c('probability', 'lcl', 'ucl')
```

```{r}
conf_int_white = data.frame("Lower Bound"=pi_hat_white[,2], "MT Percent"=pi_hat_white[,1], "Upper Bound"=pi_hat_white[,3], "Census Percent"=predictor_data[,13])
```

```{r}
# plot confidence intervals' widths
int_widths = data.frame(index=rep(1:50, 2), widths=c(y_hat_black[,3]-y_hat_black[,2], pi_hat_white[,3]-pi_hat_white[,2]), Races=rep(c('Black/African American', 'White American'), each=50))

ggplot(int_widths) + geom_line(aes(x=index, y=widths, group=Races, colour=Races)) + ylim(0,0.05) + ylab('Interval width') + scale_x_continuous(breaks=c(1:50), labels=rownames(x)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), plot.title = element_text(hjust = 0.5, size = 10), legend.position = 'bottom') + ggtitle('Widths of 95% confidence intervals for racial proportions in forensic databases')
```

```{r}
# goodness of fit
pis_train = data.frame(ground_truth=c(response_data[,3], response_data[,6]), fitted_value=c(pi_hat_black[idx,1], pi_hat_white[idx,1]), Races=rep(c('Black/African American', 'White American'), each=7), States=rep(response_data[,2], 2))

ggplot(pis_train) + geom_point(aes(x=ground_truth, y=fitted_value, shape=Races, colour=States), size=4) + xlab('Ground truth in M&T database') + ylab('Fitted probability') + xlim(0,1) + ylim(0,1) + geom_abline(linetype='longdash', linewidth=1) + ggtitle('Goodness of fit for racial breakdown') + theme(plot.title = element_text(hjust = 0.5))
```

## Predict the racial breakdown

```{r}
# predict the proportion in test data
p_hat = cbind(predict(binomial_regression_black, test_data, type='response'), predict(binomial_regression_white, test_data, type='response'))
pi_hat = array(dim=c(43,3))
pi_hat[,1] = p_hat[,1]
pi_hat[,2] = (1-p_hat[,1])*p_hat[,2]
pi_hat[,3] = 1 - pi_hat[,1] - pi_hat[,2]
# combine the proportions in forensic database
pis_mt = array(dim=c(50,3))
colnames(pis_mt) = c('mt.precent.black', 'mt.percent.white', 'mt.percent.other')
rownames(pis_mt) = rownames(x)
pis_mt[idx,] = cbind(response_data[,3], response_data[,6], 1 - response_data[,3] - response_data[,6])
pis_mt[-idx,] = pi_hat
# extract the proportions in census database
pis_census = as.array(as.matrix(predictor_data[,12:14]))
colnames(pis_census) = colnames(predictor_data)[12:14]
rownames(pis_census) = rownames(pis_mt)
```

```{r}
# calculate the absolute and relative differences between m&t and census
abs_diff = pis_mt - pis_census
rela_diff = (pis_mt - pis_census)/pis_census
```

```{r}
# plot Pie charts for breakdown
Races = c('Black/African American', 'White American', 'Other American')
states = predictor_data[,2]
```

```{r}
p.11 = ggplot(mapping = aes(x="", y=pis_census[1,], fill=Races)) + geom_col(color='black') + coord_polar(theta='y') + scale_fill_manual(values=c("#BE2A3E", "#EC754A", "#3C8D53"))  + theme_void() + ggtitle('Census') + theme(plot.title = element_text(hjust = 0.5, size=8), legend.position = 'none')
p.12 = ggplot(mapping = aes(x="", y=pis_mt[1,], fill=Races)) + geom_col(color='black') + coord_polar(theta='y') + scale_fill_manual(values=c("#BE2A3E", "#EC754A", "#3C8D53"))  + theme_void() + ggtitle('CODIS') + theme(plot.title = element_text(hjust = 0.5, size=8), legend.position = 'none')

grid.arrange(p.11, p.12, ncol=2, top=textGrob(states[1], y = -0.3,  gp=gpar(fontsize=9,font=8)))

grid.rect(gp = gpar(lwd = 1, col = "black", fill = NA))
```

```{r}
plots = list()
for (i in 1:50) {
  p.1 = ggplot(mapping = aes(x="", y=pis_census[i,], fill=Races)) + geom_col(color='black') + coord_polar(theta='y') + scale_fill_manual(values=c("#BE2A3E", "#EC754A", "#3C8D53"))  + theme_void() + ggtitle('Census') + theme(plot.title = element_text(hjust = 0.5, size = 6), legend.position = 'none')
  p.2 = ggplot(mapping = aes(x="", y=pis_mt[i,], fill=Races)) + geom_col(color='black') + coord_polar(theta='y') + scale_fill_manual(values=c("#BE2A3E", "#EC754A", "#3C8D53"))  + theme_void() + ggtitle('CODIS') + theme(plot.title = element_text(hjust = 0.5, size = 6), legend.position = 'none')
  p = arrangeGrob(p.1, p.2, ncol=2, top=textGrob(states[i], y = -0,  gp=gpar(fontsize=6)))
  p.rect = rectGrob(height = 1, width = 1, gp = gpar(lwd = 0.8, col = "black", fill = NA))
  p = gTree(children = gList(p, p.rect))
  plots[[i]] = p
}
```

```{r}
g_legend <- function(a.gplot){
  if (!gtable::is.gtable(a.gplot))
    a.gplot <- ggplotGrob(a.gplot)
  leg <- which(sapply(a.gplot$grobs, function(x) x$name) == "guide-box")
  a.gplot$grobs[[leg]]
}
legend = g_legend(p.11+theme(legend.position = 'bottom'))
```

```{r}
p.breakdown = arrangeGrob(grobs = plots, ncol=9)
grid.arrange(p.breakdown, legend, heights=c(0.95,0.05))
```

```{r}
rela_diff.df = data.frame(states=rep(states, 2), values=c(rela_diff[,1], rela_diff[,2]), Races=rep(c('Black/African American', 'White American'), each=50))

ggplot(data = rela_diff.df, mapping = aes(x=states, y=values, fill=Races)) + geom_col(position=position_dodge()) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), plot.title = element_text(hjust = 0.5, size = 10), legend.position = 'bottom') + ylab('Relative difference') + ggtitle('Relative difference of racial proportions between forensic database and Census database')
```

```{r}
abs_diff.df = data.frame(states=rep(states, 2), values=c(abs_diff[,1], abs_diff[,2]), Races=rep(c('Black/African American', 'White American'), each=50))

ggplot(data = abs_diff.df, mapping = aes(x=states, y=values, fill=Races)) + geom_col(position=position_dodge()) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), plot.title = element_text(hjust = 0.5, size = 10), legend.position = 'bottom') + ylab('Absolute difference') + ggtitle('Absolute difference of racial proportions between forensic database and Census database')
```
